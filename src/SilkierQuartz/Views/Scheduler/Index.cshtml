@model SilkierQuartz.Models.SchedulerViewModel

@{
    ViewBag.Title = "Scheduler";
    ViewBag.ShowFooter = true;
}

<div class="ui inverted page dimmer" id="dimmer"><div class="ui loader"></div></div>


<div id="scheduler-dashboard">
    <div id="msg-panel"></div>

    <h3 class="ui dividing header" style="margin-top: 0px">Overview</h3>

    <div class="ui inverted statistic" style="background-color: #0c5a0c; background-image: linear-gradient(#107c10, #0c5a0c);">
        <div class="value"><i class="small check icon"></i> @Model.ExecutedJobs</div>
        <div class="label">Jobs executed</div>
    </div>

    <div class="ui inverted statistic" style="background-color: #c42121; background-image: linear-gradient(#db2828, #c42121);">
        <div class="value"><i class="small close icon"></i> @Model.FailedJobs</div>
        <div class="label">Jobs failed</div>
    </div>

    <div class="ui inverted statistic" style="background-color: #1c70b0; background-image: linear-gradient(#2185d0, #1c70b0);">
        <div class="value"><i class="small play icon"></i> @Model.ExecutingJobs</div>
        <div class="label">Jobs executing</div>
    </div>

    <div class="ui statistic" style="background-color: #f0f0f0;">
        <div class="value">
            <div style="height: 50px" class="dashboard-histogram">
                <vc:histogram histogram-data="Model.History" />
            </div>
        </div>
        <div class="label">Latest Activity</div>
    </div>

    <div class="ui statistic" style="box-shadow: none">
        <div class="inline-stats">
            <span>@Model.JobsCount</span> jobs<br>
            <span>@Model.TriggerCount</span> triggers
        </div>
    </div>

    <div class="ui stackable grid">
        <div class="seven wide column" style="padding-right: 14px !important">
            <h3 class="ui dividing header">Status</h3>
            <table class="ui table">
                <tbody>
                    <tr>
                        <td style="min-width: 220px">In Standby Mode</td>
                        <td>@Model.MetaData.InStandbyMode.ToString().ToUpperInvariant()</td>
                    </tr>
                    <tr>
                        <td>Running Since</td>
                        <td>@Model.RunningSince @Model.UtcLabel</td>
                    </tr>
                    <tr>
                        <td>Shutdown</td>
                        <td>@Model.MetaData.Shutdown.ToString().ToUpperInvariant()</td>
                    </tr>
                    <tr>
                        <td>Started</td>
                        <td>@Model.MetaData.Started.ToString().ToUpperInvariant()</td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="nine wide column" id="col-actions">
            <h3 class="ui dividing header">Actions</h3>

            <p style="margin-top: 1em">
                @if (Model.MetaData.InStandbyMode)
                {
                    <button x-data="actionButton('start')" @@click="onClick" class="ui small button green" id="btn-start">
                        <i class="play icon"></i>Start
                    </button>
                }
                else
                {
                    <button x-data="actionButton('standby')" @@click="onClick" class="ui small button grey" id="btn-standby">
                        <i class="stop icon"></i>Standby
                    </button>
                }

                <button x-data="shutdownButton" @@click="onClick" class="ui small button red" id="btn-shutdown">
                    <i class="power icon"></i>Shutdown
                </button>
                <button x-data="actionButton('pause')" @@click="onClick" class="ui small button" id="btn-pause">
                    <i class="pause icon"></i>Pause All
                </button>
                <button x-data="actionButton('resume')" @@click="onClick" class="ui small button" id="btn-resume">
                    <i class="play icon"></i>Resume All
                </button>
            </p>

            <vc:group-actions id="job-groups" header="Job Groups" items="Model.JobGroups" />
            <vc:group-actions id="trigger-groups" header="Trigger Groups" items="Model.TriggerGroups" />
        </div>
    </div>

    <h3 class="ui dividing header">Node Info</h3>
    <table class="ui table">
        <tbody>
            <tr>
                <td style="min-width: 220px">Machine Name</td>
                <td>@Model.MachineName</td>
            </tr>
            <tr>
                <td>Application</td>
                <td>@Model.Application</td>
            </tr>
            <tr>
                <td>Scheduler Name</td>
                <td>@Model.MetaData.SchedulerName</td>
            </tr>
            <tr>
                <td>Scheduler Instance Id</td>
                <td>@Model.MetaData.SchedulerInstanceId</td>
            </tr>
            <tr>
                <td>Scheduler Remote</td>
                <td>@Model.MetaData.SchedulerRemote.ToString().ToUpperInvariant()</td>
            </tr>
            <tr>
                <td>Scheduler Type</td>
                <td>@Model.MetaData.SchedulerType.AssemblyQualifiedName</td>
            </tr>
            <tr>
                <td>Version</td>
                <td>@Model.MetaData.Version</td>
            </tr>
        </tbody>
    </table>

    <h3 class="ui dividing header">Job Store</h3>
    <table class="ui table">
        <tbody>
            <tr>
                <td style="min-width: 220px">Job Store Clustered</td>
                <td>@Model.MetaData.JobStoreClustered.ToString().ToUpperInvariant()</td>
            </tr>
            <tr>
                <td>Job Store Supports Persistence</td>
                <td>@Model.MetaData.JobStoreSupportsPersistence.ToString().ToUpperInvariant()</td>
            </tr>
            <tr>
                <td>Job Store Type</td>
                <td>@Model.MetaData.JobStoreType.AssemblyQualifiedName</td>
            </tr>
        </tbody>
    </table>

    <h3 class="ui dividing header">Thread Pool</h3>
    <table class="ui table">
        <tbody>
            <tr>
                <td style="min-width: 220px">Thread Pool Size</td>
                <td>@Model.MetaData.ThreadPoolSize</td>
            </tr>
            <tr>
                <td>Thread Pool Type</td>
                <td>@Model.MetaData.ThreadPoolType.AssemblyQualifiedName</td>
            </tr>
        </tbody>
    </table>

</div>

<div class="ui mini modal" id="shutdown-dialog">
    <div class="content">
        <p>Are you sure you want to shut down Quartz Scheduler?</p>
        <p>This action <b>is not reversible</b> which means, you will not be able to connect to this page any more!</p>
    </div>
    <div class="actions">
        <div class="ui approve red button">Shutdown</div>
        <div class="ui cancel button">Cancel</div>
    </div>
</div>

<script>
    window['scheduler'] = {
        actionUrl: @Json.Serialize(Url.Action("Action")),
        indexUrl: @Json.Serialize(Url.Action("Index"))
    }

    initHistogramTooltips($('.histogram > .bar'));
    initDimmer();

    document.addEventListener('alpine:init', () => {
        Alpine.data('groupAction', (name, action, groupId) => ({
            name,
            action,
            groupId,

            onClick() {
                doAction({
                    action: this.action,
                    name: this.name,
                    groups: this.groupId
                });
            },
        }));

        Alpine.data('actionButton', (action) => ({
            action,

            onClick() {
                doAction({ action: this.action });
            }
        }));

        Alpine.data('shutdownButton', () => ({
            action: 'shutdown',

            onClick() {
                $('#shutdown-dialog')
                    .modal({ duration: 250, onApprove: () => doAction({ action: this.action }) })
                    .modal('show');
            }
        }));
    })

    async function doAction(content) {
        $('#dimmer').dimmer('show');

        const result = await fetch(window.scheduler.actionUrl, {
                body: JSON.stringify(content),
                method: 'POST',
                headers: { 'content-type': 'application/json' }
            })
            .catch(e => ({ error: e }));

        if (result.error) {
            $('#dimmer').dimmer('hide');
            prependErrorMessage(result.error, $('#msg-panel'));

            return;
        }

        document.location = window.scheduler.indexUrl;
    }
</script>
